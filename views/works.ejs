<div id="project_section" class="section">
  <h2 class="works_header">Works</h2>

  <!-- PROJECT 1: SACRED TRIBE ENERGY HEALING -->

  <div
    class="project--sacred_tribe_energy_healing project_item project_item--left"
  >
    <div class="project_images">
      <img
        class="project_image--main"
        loading="lazy"
        src="/assets/images/sacred-tribe/sacred-tribe-energy-healing.png"
        alt="Sacred Tribe Energy Healing Preview"
      />
      <div class="secondary_images">
        <img
          class="project_image--secondary"
          loading="lazy"
          src="/assets/images/sacred-tribe/sacredtribe-desktop.png"
          alt="Sacred Tribe Energy Healing Desktop Preview"
        />
      </div>
      <div class="secondary_images">
        <img
          class="project_image--secondary"
          loading="lazy"
          src="/assets/images/sacred-tribe/sacredtribe-mobile.png"
          alt="Sacred Tribe Energy Healing Mobile Preview"
        />
      </div>
    </div>
    <div class="project_item--left_body">
      <h3 class="project_title sacred_tribe--title">
        Sacred Tribe Energy Healing
      </h3>
      <div class="project_info shadow">
        <p class="project_blurb">
          Designed and developed personalised e-commerce site based on client's
          vision and halved their monthly website fees. Shopify was integrated
          to handle secure payments, product inventory and to provide the client
          with full control of the business.
        </p>
        <div class="project_body">
          <div class="project_description">
            <h4>Description</h4>
            <p>
              Client had created a site with a drag-and-drop website provider
              that achieved a high volume of visitors but a low conversion rate.
              The site required a personal design and identity that matched the
              product but the limited available options made the site look
              outdated and as a result customers did not find it trustworthy. I
              designed and developed the site based on the clients ideas and
              integrated a Shopify Lite, giving their site an identity and a
              reduction in monthly subscription fees.
            </p>
          </div>
          <div class="project_difficulties">
            <h4>Difficulties</h4>
            <p>
              The client's original site lacked structure and a natural flow
              that would make navigation easier for users and lead to increased
              sales. The client needed the freedom to add and edit products, add
              discounts and control shipping fees. They also required a blog and
              a partner site information page they cold update freely. Most
              importantly, the client was looking for a cheaper alternative to
              the service they were using as the subscription fees continued to
              rise and there was a product limit.
            </p>
          </div>
          <div class="project_solutions">
            <h4>Solutions</h4>
            <p>
              The site was completely redesigned from scratch, creating a more
              cohesive and consistent structure while maintaining the personal
              feel of the original site. It was designed to highlight the key
              areas client wanted more traffic and provide a flow that makes
              navigation easier for the users. By integrating a Shopify Lite
              store, I was able to give the client full control of the business
              with no product limit. Any changes made on Shopify would
              dynamically update the information on their new site. By hosting
              the site on Heroku, I was able to provide a secure service with
              SSL certification to make it trustworthy. Using the above services
              led to the client's monthly fees being reduced to less than half
              of what they had been paying for their previous site.
            </p>
          </div>
          <div class="project_notable_features">
            <h4>Notable Features</h4>
            <ul>
              <li>Secure payments with Shopify</li>
              <li>
                Full control of product inventory, shipping, pricing and
                discounts
              </li>
              <li>Custom products</li>
              <li>Personalised, fully responsive design</li>
              <li>Product filtering</li>
              <li>
                Dynamically added material list to each product with images
              </li>
              <li>
                Secret log in for client to add/edit blogs and links to partner
                sites
              </li>
              <li>Custom client email and domain</li>
              <li>
                Sessions to store cart and wishlist for returning customers
              </li>
              <li>SSL certification</li>
            </ul>
          </div>
        </div>
        <p class="project_item--read_more closed">Read more</p>
        <div class="project_links">
          <a
            target="_blank"
            aria-label="View Sacred Tribe Energy Healing"
            rel="noreferrer"
            href="https://www.sacredtribe-energyhealing.com/"
            ><button
              type="button"
              class="btn project_link--external sacred_tribe--link"
            >
              View Site
            </button></a
          >
          <a
            target="_blank"
            aria-label="View the Sacred Tribe Energy Healing GitHub Repo"
            rel="noreferrer"
            href="https://github.com/slenane/SacredTribeEnergyHealing"
            ><button type="button" class="btn github_link">
              <i class="fab fa-github"></i> GitHub
            </button></a
          >
        </div>
      </div>
      <div class="project_stack sacred-tribe_stack">
        <p class="code_bracket">{</p>
        <div class="project_stack--item">
          <div class="project_stack--description shadow">
            <h4>HTML</h4>
            <p>
              Used in conjunction with Embedded JavaScript Templating (EJS) to
              create template pages with dynamic additions to the markup. All
              product information is dynamically loaded and inserted from
              Shopify so the client has full control over what is shown on the
              page. The cart is generated with a template displaying data from a
              Shopify checkout.
            </p>
          </div>
          <img
            class="project_stack--icon"
            loading="lazy"
            src="/assets/images/icons/html5.png"
            alt="HTML Logo"
          />
        </div>
        <div class="project_stack--item">
          <div class="project_stack--description shadow">
            <h4>CSS</h4>
            <p>
              Used to style all pages and create the responsive design through
              media queries. All style changes and animations made using
              JavaScript are achieved through CSS classes.
            </p>
          </div>
          <img
            class="project_stack--icon"
            loading="lazy"
            src="/assets/images/icons/css3.png"
            alt="CSS Logo"
          />
        </div>
        <div class="project_stack--item">
          <div class="project_stack--description shadow">
            <h4>JavaScript</h4>
            <p>
              Used to produce interactivity of the site. Everything from opening
              the navigation to filtering products is made possible with
              JavaScript. WebSockets are used to improve the user experience by
              communicating with the server to update the cart without having to
              load a new page, making the process much smoother for the user.
            </p>
          </div>
          <img
            class="project_stack--icon"
            loading="lazy"
            src="/assets/images/icons/javascript.png"
            alt="JavaScript Logo"
          />
        </div>
        <div class="project_stack--item">
          <div class="project_stack--description shadow">
            <h4>Bootstrap</h4>
            <p>
              Used for boilerplate fonts, navigation bars and styles. Contact
              forms were generated using Bootstrap classes for familiar style
              and functionality.
            </p>
          </div>
          <img
            class="project_stack--icon"
            loading="lazy"
            src="/assets/images/icons/bootstrap.png"
            alt="Bootstrap Logo"
          />
        </div>
        <div class="project_stack--item">
          <div class="project_stack--description shadow">
            <h4>Node.js</h4>
            <p>
              Used to create the web application. Node.js connects all aspects
              of the site together. The app serves pages based on the user
              request, making calls to Shopify and the database to provide all
              the information required.
            </p>
          </div>
          <img
            class="project_stack--icon"
            loading="lazy"
            src="/assets/images/icons/nodejs.png"
            alt="Node.js Logo"
          />
        </div>
        <div class="project_stack--item">
          <div class="project_stack--description shadow">
            <h4>Express.js</h4>
            <p>
              Used as a Node.js framework that provides a variety of HTTP
              utility methods and allows the addition of middleware to the
              routes for extra security and functionality.
            </p>
          </div>
          <img
            class="project_stack--icon"
            loading="lazy"
            src="/assets/images/icons/express.png"
            alt="Express.js Logo"
          />
        </div>
        <div class="project_stack--item">
          <div class="project_stack--description shadow">
            <h4>MongoDB</h4>
            <p>
              Used to store session information for users, blog posts, links and
              client information. The remote database is capable of much more
              and can easily be adjusted to store more information but it is not
              necessary as the products and business information is all stored
              on Shopify.
            </p>
          </div>
          <img
            class="project_stack--icon"
            loading="lazy"
            src="/assets/images/icons/mongodb.png"
            alt="MongoDB Logo"
          />
        </div>
        <div class="project_stack--item">
          <div class="project_stack--description shadow">
            <h4>Shopify</h4>
            <p>
              Used to manage the business. A Shopify Lite store was created to
              hold all product information and provide secure a payment method.
              The client maintains full control of the store after the site is
              finished and can set prices, add discounts, control shipping and
              inventory with ease. As soon as the changes are saved, the site
              will automatically be updated to reflect them.
            </p>
          </div>
          <img
            class="project_stack--icon"
            loading="lazy"
            src="/assets/images/icons/shopify.png"
            alt="Shopify Logo"
          />
        </div>
        <div class="project_stack--item">
          <div class="project_stack--description shadow">
            <h4>Heroku</h4>
            <p>
              Used to host the website. The Heroku Hobby plan allows you to
              maintain an always-on dyno with SSL certificates and custom
              domains all for €5 per month. With this package you are also able
              to see live metrics including traffic, memory and response time of
              your site.
            </p>
          </div>
          <img
            class="project_stack--icon"
            loading="lazy"
            src="/assets/images/icons/heroku.png"
            alt="Heroku Logo"
          />
        </div>
        <p class="code_bracket">}</p>
      </div>
    </div>

    <div class="project_open--stack sacred-tribe_stack bouncing_icon">
      <p class="code_bracket">{</p>
      <div class="project_stack--item">
        <div
          class="project_stack--description description_large description_large--left shadow"
        >
          <h4>HTML</h4>
          <p>
            Used in conjunction with Embedded JavaScript Templating (EJS) to
            create template pages with dynamic additions to the markup. All
            product information is dynamically loaded and inserted from Shopify
            so the client has full control over what is shown on the page. The
            cart is generated with a template displaying data from a Shopify
            checkout.
          </p>
        </div>
        <img
          class="project_stack--icon"
          loading="lazy"
          src="/assets/images/icons/html5.png"
          alt="HTML Logo"
        />
      </div>
      <div class="project_stack--item">
        <div class="project_stack--description description_large shadow">
          <h4>CSS</h4>
          <p>
            Used to style all pages and create the responsive design through
            media queries. All style changes and animations made using
            JavaScript are achieved through CSS classes.
          </p>
        </div>
        <img
          class="project_stack--icon"
          loading="lazy"
          src="/assets/images/icons/css3.png"
          alt="CSS Logo"
        />
      </div>
      <div class="project_stack--item">
        <div class="project_stack--description description_large shadow">
          <h4>JavaScript</h4>
          <p>
            Used to produce interactivity of the site. Everything from opening
            the navigation to filtering products is made possible with
            JavaScript. WebSockets are used to improve the user experience by
            communicating with the server to update the cart without having to
            load a new page, making the process much smoother for the user.
          </p>
        </div>
        <img
          class="project_stack--icon"
          loading="lazy"
          src="/assets/images/icons/javascript.png"
          alt="JavaScript Logo"
        />
      </div>
      <div class="project_stack--item">
        <div class="project_stack--description description_large shadow">
          <h4>Bootstrap</h4>
          <p>
            Used for boilerplate fonts, navigation bars and styles. Contact
            forms were generated using Bootstrap classes for familiar style and
            functionality.
          </p>
        </div>
        <img
          class="project_stack--icon"
          loading="lazy"
          src="/assets/images/icons/bootstrap.png"
          alt="Bootstrap Logo"
        />
      </div>
      <div class="project_stack--item">
        <div class="project_stack--description description_large shadow">
          <h4>Node.js</h4>
          <p>
            Used to create the web application. Node.js connects all aspects of
            the site together and allows the use of libraries to improve the
            site. The app serves pages based on the user request, making calls
            to Shopify and the database to provide all the information required.
          </p>
        </div>
        <img
          class="project_stack--icon"
          loading="lazy"
          src="/assets/images/icons/nodejs.png"
          alt="Node.js Logo"
        />
      </div>
      <div class="project_stack--item">
        <div class="project_stack--description description_large shadow">
          <h4>Express.js</h4>
          <p>
            Used as a Node.js framework that provides a variety of HTTP utility
            methods and allows the addition of middleware to the routes for
            extra security and functionality.
          </p>
        </div>
        <img
          class="project_stack--icon"
          loading="lazy"
          src="/assets/images/icons/express.png"
          alt="Express.js Logo"
        />
      </div>
      <div class="project_stack--item">
        <div class="project_stack--description description_large shadow">
          <h4>MongoDB</h4>
          <p>
            Used to store session information for users, blog posts, links and
            client information. The remote database is capable of much more and
            can easily be adjusted to store more information but it is not
            necessary as the products and business information is all stored on
            Shopify.
          </p>
        </div>
        <img
          class="project_stack--icon"
          loading="lazy"
          src="/assets/images/icons/mongodb.png"
          alt="MongoDB Logo"
        />
      </div>
      <div class="project_stack--item bounce">
        <div
          class="project_stack--description description_large description_large--right shadow"
        >
          <h4>Shopify</h4>
          <p>
            Used to manage the business. A Shopify Lite store was created to
            hold all product information and provide secure a payment method.
            The client maintains full control of the store after the site is
            finished and can set prices, add discounts, control shipping and
            inventory with ease. As soon as the changes are saved, the site will
            automatically be updated to reflect them.
          </p>
        </div>
        <img
          class="project_stack--icon"
          loading="lazy"
          src="/assets/images/icons/shopify.png"
          alt="Shopify Logo"
        />
      </div>
      <div class="project_stack--item">
        <div
          class="project_stack--description description_large description_large--right shadow"
        >
          <h4>Heroku</h4>
          <p>
            Used to host the website. The Heroku Hobby plan allows you to
            maintain an always-on dyno with SSL certificates and custom domains
            all for €5 per month. With this package you are also able to see
            live metrics including traffic, memory and response time of your
            site.
          </p>
        </div>
        <img
          class="project_stack--icon"
          loading="lazy"
          src="/assets/images/icons/heroku.png"
          alt="Heroku Logo"
        />
      </div>
      <p class="code_bracket">}</p>
    </div>
  </div>

  <!-- PROJECT 2: DAILY CHESS PUZZLE -->

  <div class="project--daily_chess_puzzle project_item project_item--right">
    <div class="project_item--right_body">
      <h3 class="project_title daily_chess--title">
        DAILY <span class="daily_chess--title_bold">CHESS</span> PUZZLE
      </h3>
      <div class="project_info shadow">
        <p class="project_blurb">
          Daily Chess Puzzle chrome extension allows users to solve chess.com's
          daily puzzle directly from the browser. It also gives users unlimited
          access to the daily puzzle archives for free. Daily Chess Puzzle
          currently has 100+ weekly users.
        </p>
        <div class="project_body">
          <div class="project_description">
            <h4>Description</h4>
            <p>
              Most chess experts claim that solving chess puzzles is the most
              effective chess training method to improve your chess skills. So I
              wanted to develop a free chrome extension that would allow the
              user to improve their chess conveniently from the browser.
            </p>
          </div>
          <div class="project_difficulties">
            <h4>Difficulties</h4>
            <p>
              Most chess application require a paid membership to have unlimited
              access to puzzles. So I needed to find a way to import the puzzle
              data for free. Puzzle data is in PGN format so this data would
              then need to be parsed and divided into individual moves. All
              potential moves needed to be incorporated, for example, castling
              on both sides and pawn promotion. It also needed to look familiar
              and function similarly to the major chess sites so users would be
              comfortable using it immediately.
            </p>
          </div>
          <div class="project_solutions">
            <h4>Solutions</h4>
            <p>
              chess.com's chess-web-api provided the data for their daily puzzle
              in PGN notation. This data was parsed and separated into
              individual moves with regular expressions. chessboard.js was used
              to generate the chessboard with moveable pieces and chess.js was
              used for the chess logic and rules. With chess.js, you can view
              the current position in PGN notation. Using these three packages I
              was able to set the starting position and allow the user to make a
              move, the PGN of which was then compared to the expected value. If
              the move matched, the puzzle continued. If not, the user is shown
              an incorrect move message and asked to try again. The style and
              controls were made to match chess.com for familiarity. The
              chess-web-api also releases the notation for a random daily puzzle
              from the archives, which updates every 15 seconds allowing
              unlimited free access to past puzzles.
            </p>
          </div>
          <div class="project_notable_features">
            <h4>Notable Features</h4>
            <ul>
              <li>Unlimited free puzzles</li>
              <li>Direct access from the browser</li>
              <li>Familiar chess.com style</li>
              <li>No membership/subscription necessary</li>
              <li>Hints, solution, reset and rotate board buttons</li>
              <li>Direct links to chess.com for more information</li>
            </ul>
          </div>
        </div>
        <p class="project_item--read_more closed">Read more</p>
        <div class="project_links">
          <a
            target="_blank"
            aria-label="View Daily Chess Puzzle"
            rel="noreferrer"
            href="https://chrome.google.com/webstore/detail/daily-chess-puzzle/nbccedaochfcpakfdgclnjkdbagniplh?hl=en"
            ><button
              type="button"
              class="btn project_link--external daily_chess--link"
            >
              View Extension
            </button></a
          >
          <a
            target="_blank"
            aria-label="View the Daily Chess Puzzle GitHub Repo"
            rel="noreferrer"
            href="https://github.com/slenane/Chess-Daily-Puzzle"
            ><button type="button" class="btn github_link">
              <i class="fab fa-github"></i> GitHub
            </button></a
          >
          <a
            target="_blank"
            aria-label="Challenge me on Chess.com"
            rel="noreferrer"
            href="https://www.chess.com/member/lovelycarbonara"
            class="chess--challenge_link hide"
            ><button type="button" class="btn chess_com_link">
              <img src="/assets/images/icons/chesscom.png" alt="" /> Challenge
              me!
            </button></a
          >
        </div>
      </div>
      <div class="project_stack daily-chess_stack">
        <p class="code_bracket">{</p>
        <div class="project_stack--item">
          <div class="project_stack--description shadow">
            <h4>HTML</h4>
            <p>
              Used to structure the application. The chessboard itself is added
              dynamically but the controls are added here in the same setup as
              chess.com. chessboard.js does not provide any promotion piece
              options so this was also added here to replicate the style of
              chess.com.
            </p>
          </div>
          <img
            class="project_stack--icon"
            loading="lazy"
            src="/assets/images/icons/html5.png"
            alt="HTML Logo"
          />
        </div>
        <div class="project_stack--item">
          <div class="project_stack--description shadow">
            <h4>CSS</h4>
            <p>
              Used to style the application like chess.com. The style is altered
              in response to user interaction. Red and green messages flash
              depending on the move they make and whether the puzzle is solve or
              not.
            </p>
          </div>
          <img
            class="project_stack--icon"
            loading="lazy"
            src="/assets/images/icons/css3.png"
            alt="CSS Logo"
          />
        </div>
        <div class="project_stack--item">
          <div class="project_stack--description shadow">
            <h4>JavaScript</h4>
            <p>
              Used to control the puzzle. The puzzle starting position is loaded
              by parsing the PGN notation from chess.com. When the user makes a
              move, the position on the board is compared to what the board
              should look like after that move. If the user makes the wrong move
              they are kicked back and have to try again. When the position on
              the board matches the solution position then the puzzle has been
              solved.
            </p>
          </div>
          <img
            class="project_stack--icon"
            loading="lazy"
            src="/assets/images/icons/javascript.png"
            alt="JavaScript Logo"
          />
        </div>
        <div class="project_stack--item">
          <div class="project_stack--description shadow">
            <h4>Node.js</h4>
            <p>
              Used to create the application. Node.js connects all aspects of
              the extension together and allows the use of libraries to improve
              the application. Node.js is used to fetch the information from
              chess.com and to import the chessboard.js and chess.js libraries.
            </p>
          </div>
          <img
            class="project_stack--icon"
            loading="lazy"
            src="/assets/images/icons/nodejs.png"
            alt="Node.js Logo"
          />
        </div>
        <div class="project_stack--item">
          <div class="project_stack--description shadow">
            <h4>Webpack</h4>
            <p>
              Used to bundle the JavaScript files for use in the browser. This
              application would not be possible without webpack as the Chrome
              web store has strict cross-origin policies. Which means that
              without Webpack it would not be possible to use chessboard.js,
              chess.js or make calls to the chess-web-api.
            </p>
          </div>
          <img
            class="project_stack--icon"
            loading="lazy"
            src="/assets/images/icons/webpack.png"
            alt="Webpack Logo"
          />
        </div>
        <div class="project_stack--item">
          <div class="project_stack--description shadow">
            <h4>Chess-web-api</h4>
            <p>
              Used to import all the data required to create this application.
              The name and PGN notation of the daily and random puzzles is
              provided as an object. This information is then parsed and used in
              conjunction with chessboard.js and chess.js to add functionality
              to the application.
            </p>
          </div>
          <img
            class="project_stack--icon"
            loading="lazy"
            src="/assets/images/icons/chesscom.png"
            alt="chess.com Logo"
          />
        </div>
        <p class="code_bracket">}</p>
      </div>
    </div>
    <div class="project_images">
      <img
        class="project_image--main"
        loading="lazy"
        src="/assets/images/chess/daily-chess-puzzle.png"
        alt="Daily Chess Puzzle Preview"
      />
      <div class="secondary_images chess_gif--div">
        <img
          class="project_image--secondary chess_gif"
          loading="lazy"
          src="/assets/images/chess/daily-chess.gif"
          alt="Daily Chess Gif Preview"
        />
      </div>
      <div class="secondary_images">
        <img
          class="project_image--secondary"
          loading="lazy"
          src="/assets/images/chess/daily-chess-puzzle2.png"
          alt="Sacred Tribe Energy Healing Mobile Preview"
        />
      </div>
    </div>

    <div class="project_open--stack daily-chess_stack bouncing_icon">
      <p class="code_bracket">{</p>
      <div class="project_stack--item">
        <div class="project_stack--description description_large shadow">
          <h4>HTML</h4>
          <p>
            Used to structure the application. The chessboard itself is added
            dynamically but the controls are added here in the same setup as
            chess.com. chessboard.js does not provide any promotion piece
            options so this was also added here to replicate the style of
            chess.com.
          </p>
        </div>
        <img
          class="project_stack--icon"
          loading="lazy"
          src="/assets/images/icons/html5.png"
          alt="HTML Logo"
        />
      </div>
      <div class="project_stack--item">
        <div class="project_stack--description description_large shadow">
          <h4>CSS</h4>
          <p>
            Used to style the application like chess.com. The style is altered
            in response to user interaction. Red and green messages flash
            depending on the move they make and whether the puzzle is solve or
            not.
          </p>
        </div>
        <img
          class="project_stack--icon"
          loading="lazy"
          src="/assets/images/icons/css3.png"
          alt="CSS Logo"
        />
      </div>
      <div class="project_stack--item">
        <div class="project_stack--description description_large shadow">
          <h4>JavaScript</h4>
          <p>
            Used to control the puzzle. The puzzle starting position is loaded
            by parsing the PGN notation from chess.com. When the user makes a
            move, the position on the board is compared to what the board should
            look like after that move. If the user makes the wrong move they are
            kicked back and have to try again. When the position on the board
            matches the solution position then the puzzle has been solved.
          </p>
        </div>
        <img
          class="project_stack--icon"
          loading="lazy"
          src="/assets/images/icons/javascript.png"
          alt="JavaScript Logo"
        />
      </div>
      <div class="project_stack--item">
        <div class="project_stack--description description_large shadow">
          <h4>Node.js</h4>
          <p>
            Used to create the application. Node.js connects all aspects of the
            extension together and allows the use of libraries to improve the
            application. Node.js is used to fetch the information from chess.com
            and to import the chessboard.js and chess.js libraries.
          </p>
        </div>
        <img
          class="project_stack--icon"
          loading="lazy"
          src="/assets/images/icons/nodejs.png"
          alt="Node.js Logo"
        />
      </div>
      <div class="project_stack--item">
        <div class="project_stack--description description_large shadow">
          <h4>Webpack</h4>
          <p>
            Used to bundle the JavaScript files for use in the browser. This
            application would not be possible without webpack as the Chrome web
            store has strict cross-origin policies. Which means that without
            Webpack it would not be possible to use chessboard.js, chess.js or
            make calls to the chess-web-api.
          </p>
        </div>
        <img
          class="project_stack--icon"
          loading="lazy"
          src="/assets/images/icons/webpack.png"
          alt="Webpack Logo"
        />
      </div>
      <div class="project_stack--item bounce">
        <div class="project_stack--description description_large shadow">
          <h4>Chess-web-api</h4>
          <p>
            Used to import all the data required to create this application. The
            name and PGN notation of the daily and random puzzles is provided as
            an object. This information is then parsed and used in conjunction
            with chessboard.js and chess.js to add functionality to the
            application.
          </p>
        </div>
        <img
          class="project_stack--icon"
          loading="lazy"
          src="/assets/images/icons/chesscom.png"
          alt="chess.com Logo"
        />
      </div>
      <p class="code_bracket">}</p>
    </div>
  </div>

  <!-- PROJECT 3: GOAL TRACKER -->

  <div class="project--goals project_item project_item--left">
    <div class="project_images">
      <img
        class="project_image--main"
        loading="lazy"
        src="/assets/images/goals/goal-tracker1.png"
        alt="Goal Tracker Preview"
      />
      <div class="secondary_images">
        <img
          class="project_image--secondary goals_gif"
          loading="lazy"
          src="/assets/images/goals/goal-tracker.gif"
          alt="Goal Tracker Preview"
        />
      </div>
      <div class="secondary_images">
        <img
          class="project_image--secondary"
          loading="lazy"
          src="/assets/images/goals/goal-tracker2.png"
          alt="Goal Tracker Preview"
        />
      </div>
    </div>

    <div class="project_item--left_body">
      <h3 class="project_title goals_title">GOALS</h3>
      <div class="project_info shadow">
        <p class="project_blurb">
          Goals web application allows users to track yearly goals and see their
          progress in real time. Whether you want to achieve something or kick a
          bad habit, this application will help you stay focused.
        </p>
        <div class="project_body">
          <div class="project_description">
            <h4>Description</h4>
            <p>
              Updates on your progress are essential to keeping you motivated to
              achieve your goals. This application allows you to track and view
              your progress in real time, regardless of the type of goal. Goals
              are divided into categories to maintain focus on all goals.
            </p>
          </div>
          <div class="project_difficulties">
            <h4>Difficulties</h4>
            <p>
              Not all goals can be measured in the same way. If you would like
              to quit or achieve something, they need to be tracked in different
              ways. Some goals can be marked with a checkbox, while others may
              need to be shown with a target value. With target values, users
              need to be able to write notes to reflect on how they have
              progressed.
            </p>
          </div>
          <div class="project_solutions">
            <h4>Solutions</h4>
            <p>
              Users add sub-goals to the goal categories which make up the
              percentage complete value. Checked and target sub-goals are
              weighted evenly, with the percentage completion of the targets
              being immediately added to the goal percentage. This allows for a
              more accurate representation of user progress. For example, if you
              plan to run 1,000km in a year, the percentage completion will be
              updated with each entry and not only when the target is reached.
              Notes can be added to the targets to keep track of your progress.
              Goals can be organised as the user sees fit and sub-goals are
              moved to the bottom upon completion to shift focus to the next
              goal.
            </p>
          </div>
          <div class="project_notable_features">
            <h4>Notable Features</h4>
            <ul>
              <li>Real-time goal updates</li>
              <li>Set goals to achieve or quit something</li>
              <li>Target sub-goals for tracking quantity with notes</li>
              <li>Checkbox sub-goals for simple complete/incomplete goals</li>
              <li>Percentage wheels and bars with animations</li>
              <li>Organise goals</li>
              <li>Save to localStorage</li>
              <li>Motivational quotes</li>
            </ul>
          </div>
        </div>
        <p class="project_item--read_more closed">Read more</p>
        <div class="project_links">
          <a
            target="_blank"
            aria-label="View the Goals Github Repo"
            rel="noreferrer"
            href="https://github.com/slenane/Goal-Tracker"
            ><button type="button" class="btn github_link">
              <i class="fab fa-github"></i> GitHub
            </button></a
          >
        </div>
      </div>
      <div class="project_stack goals_stack">
        <p class="code_bracket">{</p>
        <div class="project_stack--item">
          <div class="project_stack--description shadow">
            <h4>HTML</h4>
            <p>
              Used to structure the application. When the user adds a goal, HTML
              is dynamically inserted into the container. The goal HTML is
              structured to accept the addition of sub-goals and notes which are
              also added dynamically.
            </p>
          </div>
          <img
            class="project_stack--icon"
            loading="lazy"
            src="/assets/images/icons/html5.png"
            alt="HTML Logo"
          />
        </div>
        <div class="project_stack--item">
          <div class="project_stack--description shadow">
            <h4>CSS</h4>
            <p>
              Used to style the application. Goals container is a fully
              responsive CSS grid. The percentage wheels and progress bars are
              animated in response to user interaction. When sub-goals are
              complete they are greyed-out and styled with a strike-through.
            </p>
          </div>
          <img
            class="project_stack--icon"
            loading="lazy"
            src="/assets/images/icons/css3.png"
            alt="CSS Logo"
          />
        </div>
        <div class="project_stack--item">
          <div class="project_stack--description shadow">
            <h4>JavaScript</h4>
            <p>
              Used to add function to the application. This application is
              written using vanilla JavaScript and following a
              model-view-controller (MVC) design pattern. The goals are created
              and stored as JavaScript classes with sub-goals and target classes
              store within them. The goal information is dynamically added to
              the interface. Users have full control over the goals - being able
              to edit, delete, organise and add goals easily. This has been
              built as a single page application so there is no loading time
              when adding or opening goals. All user information is saved to
              localStorage.
            </p>
          </div>
          <img
            class="project_stack--icon"
            loading="lazy"
            src="/assets/images/icons/javascript.png"
            alt="JavaScript Logo"
          />
        </div>
        <div class="project_stack--item">
          <div class="project_stack--description shadow">
            <h4>Node.js</h4>
            <p>
              Used to create the application. Node.js connects all aspects of
              the extension together and allows the use of libraries to improve
              the application. One such library is the motivational quote
              package which adds a new motivational quote every day.
            </p>
          </div>
          <img
            class="project_stack--icon"
            loading="lazy"
            src="/assets/images/icons/nodejs.png"
            alt="Node.js Logo"
          />
        </div>
        <div class="project_stack--item">
          <div class="project_stack--description shadow">
            <h4>Webpack</h4>
            <p>
              Used to bundle the JavaScript files for use in the browser.
              Webpack configures the babel-loader to compile JavaScript code and
              bundle it with CSS files to reduce file size through minifying.
            </p>
          </div>
          <img
            class="project_stack--icon"
            loading="lazy"
            src="/assets/images/icons/webpack.png"
            alt="Webpack Logo"
          />
        </div>
        <div class="project_stack--item">
          <div class="project_stack--description shadow">
            <h4>Babel</h4>
            <p>
              Used to compile modern JavaScript code and convert it into a
              backwards compatible version of JavaScript to ensure the code
              works on older browsers and devices.
            </p>
          </div>
          <img
            class="project_stack--icon"
            loading="lazy"
            src="/assets/images/icons/babel.png"
            alt="Babel Logo"
          />
        </div>
        <p class="code_bracket">}</p>
      </div>
    </div>

    <div class="project_open--stack goals_stack bouncing_icon">
      <p class="code_bracket">{</p>
      <div class="project_stack--item">
        <div class="project_stack--description description_large shadow">
          <h4>HTML</h4>
          <p>
            Used to structure the application. When the user adds a goal, HTML
            is dynamically inserted into the container. The goal HTML is
            structured to accept the addition of sub-goals and notes which are
            also added dynamically.
          </p>
        </div>
        <img
          class="project_stack--icon"
          loading="lazy"
          src="/assets/images/icons/html5.png"
          alt="HTML Logo"
        />
      </div>
      <div class="project_stack--item">
        <div class="project_stack--description description_large shadow">
          <h4>CSS</h4>
          <p>
            Used to style the application. Goals container is a fully responsive
            CSS grid. The percentage wheels and progress bars are animated in
            response to user interaction. When sub-goals are complete they are
            greyed-out and styled with a strike-through.
          </p>
        </div>
        <img
          class="project_stack--icon"
          loading="lazy"
          src="/assets/images/icons/css3.png"
          alt="CSS Logo"
        />
      </div>
      <div class="project_stack--item bounce">
        <div class="project_stack--description description_large shadow">
          <h4>JavaScript</h4>
          <p>
            Used to add function to the application. This application is written
            using vanilla JavaScript and following a model-view-controller (MVC)
            design pattern. The goals are created and stored as JavaScript
            classes with sub-goals and target classes store within them. The
            goal information is dynamically added to the interface. Users have
            full control over the goals - being able to edit, delete, organise
            and add goals easily. This has been built as a single page
            application so there is no loading time when adding or opening
            goals. All user information is saved to localStorage.
          </p>
        </div>
        <img
          class="project_stack--icon"
          loading="lazy"
          src="/assets/images/icons/javascript.png"
          alt="JavaScript Logo"
        />
      </div>
      <div class="project_stack--item">
        <div class="project_stack--description description_large shadow">
          <h4>Node.js</h4>
          <p>
            Used to create the application. Node.js connects all aspects of the
            extension together and allows the use of libraries to improve the
            application. One such library is the motivational quote package
            which adds a new motivational quote every day.
          </p>
        </div>
        <img
          class="project_stack--icon"
          loading="lazy"
          src="/assets/images/icons/nodejs.png"
          alt="Node.js Logo"
        />
      </div>
      <div class="project_stack--item">
        <div class="project_stack--description description_large shadow">
          <h4>Webpack</h4>
          <p>
            Used to bundle the JavaScript files for use in the browser. Webpack
            configures the babel-loader to compile JavaScript code and bundle it
            with CSS files to reduce file size through minifying.
          </p>
        </div>
        <img
          class="project_stack--icon"
          loading="lazy"
          src="/assets/images/icons/webpack.png"
          alt="Webpack Logo"
        />
      </div>
      <div class="project_stack--item">
        <div class="project_stack--description description_large shadow">
          <h4>Babel</h4>
          <p>
            Used to compile modern JavaScript code and convert it into a
            backwards compatible version of JavaScript to ensure the code works
            on older browsers and devices.
          </p>
        </div>
        <img
          class="project_stack--icon"
          loading="lazy"
          src="/assets/images/icons/babel.png"
          alt="Babel Logo"
        />
      </div>
      <p class="code_bracket">}</p>
    </div>
  </div>
</div>
